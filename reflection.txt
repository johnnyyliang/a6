# Assignment 6 reflection

## Submitter metadata

Partner 1: Gavin Nguyen (gjn36)
Partner 2: Johnathan Liang (jl4482)

Hours spent working on this assignment: 30.0

## Verification questions

Play a game of PacMann (on the default 10 x 10 board) by running "GraphicalApp.java".
If you completed the assignment with a partner, both partners should independently 
play the game and report on the following items:


1. How many pellets (i.e., the big circles) did PacMann eat?

   Answer: gjn36 - 3
           jl4482 - 4

2. During each of the FLEE sequences, how many ghosts did PacMann eat?

   Answer: gjn36 - 10
           jl4482 - 7

3. What was your final score?

   Answer: gjn36 - 8900
           jl4482 - 5940

## Reflection questions

1. For TODO 1, briefly explain how you constructed your graph. Did you discover
   the maze via a BFS/DFS search, or did you iterate directly over the tile grid
   to locate edges? Why did you choose this approach?
   
   Answer: 
   
   We constructed our graph by iterating over the tile grid. We identified all PATH tiles in the
   maze and then stored each vertex in a hashmap with their grid coordinates as keys. Then, for each
   vertex, we looked at the four possible directions to find neighboring PATH tiles, creating edges
   between connected vertices. The edge weights were calculated based on elevation differences
   between tiles. We chose this direct iteration approach because we already had complete
   information about the maze. This approach allowed us to build a complete representation of all
   possible movements in the maze.

2. In the original Pac-Man game, a piece of fruit appeared at a predetermined 
   position on the board once Pac-Man had eaten 70 dots and remained on the screen 
   for 9 seconds. Eating this fruit awarded the player a score bonus. Describe how 
   you could add this feature to your PacMann game. Which files, fields, or methods 
   would you need to edit / add? 

   Answer: 

   We could add this fruit feature to our PacMann game by first adding a new Fruit item in
   GameModel.java. We could then add new fields to GameModel, such as an int dotsEaten, to keep
   track of how many dots were eaten to determine if a fruit should appear. We could add a boolean
   field fruitActive to determine if the fruit should be active, which could be set as true if the
   conditions for a fruit appearing were fulfilled. Additionally, a timer for fruit should be added
   so that it actually stays on screen for only 9 seconds. In the placeDotsAndPellets() method, we
   would need to designate a fixed position for the fruit to appear. We should also modify the
   processPacMannArrival() method to increment dotsEaten when dots are eaten, and to check
   if 70 dots have been consumed to trigger the fruit appearance. We should also create a new method
   called activateFruit() to place the fruit at the predetermined position and start a 9-second
   timer. We would also need to edit the update() method in GameController so that it can check if
   the fruit timer has expired and remove the fruit if necessary. We should also edit the
   processPacMannArrival() method to check if PacMann has eaten the fruit, award bonus points, and
   then remove the fruit. The GameBoard.java file would also need to be updated to render the fruit
   on the board, adding a new case to the paintVertex method.

(Answer RQ3 only if you completed the challenge extension, otherwise delete it.)

3. In a couple of sentences, explain the strategy employed by your PacMannAI.

   Answer: 
   
   Essentially, our PacMannAI employs the strategy in which PacMann prioritizes collecting pellets,
   then dots while avoiding ghosts. It 'avoids' ghosts by maintaining a distance from the ghosts. It
   does this by saying that PacMann is in danger if ghosts are too close, in which, PacMann finds a
   path away from ghosts which try to maximize distance from the ghosts. If possible, it tries to
   pick paths that also collect items when PacMann is safe. While PacMann is not in danger, it finds
   the nearest prioritized item and navigates to it.

